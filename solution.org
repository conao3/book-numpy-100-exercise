#+title: Numpy 100
#+author: conao3
#+date: <2020-07-09 Thu>
#+options: ^:{}

* Config                                                           :noexport:
* Import the numpy package under the name np (★☆☆)
#+begin_src python
import numpy as np
#+end_src

#+RESULTS[8e44e35431bcd44d0dfce26623e25e87bb39fb3f]:

* Print the numpy version and the configuration (★☆☆)
#+begin_src python
print("numpy version:", np.__version__)
np.show_config()
#+end_src

#+RESULTS[6031a7a450ff93e625a064cba91c4e1ce958b9da]:
#+begin_example
  numpy version: 1.18.3
  blas_mkl_info:
    NOT AVAILABLE
  blis_info:
    NOT AVAILABLE
  openblas_info:
      libraries = ['openblas', 'openblas']
      library_dirs = ['/usr/local/lib']
      language = c
      define_macros = [('HAVE_CBLAS', None)]
  blas_opt_info:
      libraries = ['openblas', 'openblas']
      library_dirs = ['/usr/local/lib']
      language = c
      define_macros = [('HAVE_CBLAS', None)]
  lapack_mkl_info:
    NOT AVAILABLE
  openblas_lapack_info:
      libraries = ['openblas', 'openblas']
      library_dirs = ['/usr/local/lib']
      language = c
      define_macros = [('HAVE_CBLAS', None)]
  lapack_opt_info:
      libraries = ['openblas', 'openblas']
      library_dirs = ['/usr/local/lib']
      language = c
      define_macros = [('HAVE_CBLAS', None)]
#+end_example

* Create a null vector of size 10 (★☆☆)
#+begin_src python
np.zeros(10)
#+end_src

#+RESULTS[3688ac0c792b10292b2721ad9b91f7d18df739a6]:
: array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])

* How to find the memory size of any array (★☆☆)
#+begin_src python
Z = np.zeros(10)
print("%d bytes" % (Z.size * Z.itemsize))
#+end_src

#+RESULTS[1b2ce5a0f4435e2de388d64ce02a89d2c11c60d0]:
: 80 bytes

* How to get the documentation of the numpy add function from the command line? (★☆☆)
#+begin_src shell :results raw
python -c "import numpy as np; np.info(np.add)"
#+end_src

#+RESULTS:
add(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])

Add arguments element-wise.

Parameters
----------
x1, x2 : array_like
    The arrays to be added. If ``x1.shape != x2.shape``, they must be broadcastable to a common shape (which becomes the shape of the output).
out : ndarray, None, or tuple of ndarray and None, optional
    A location into which the result is stored. If provided, it must have
    a shape that the inputs broadcast to. If not provided or None,
    a freshly-allocated array is returned. A tuple (possible only as a
    keyword argument) must have length equal to the number of outputs.
where : array_like, optional
    This condition is broadcast over the input. At locations where the
    condition is True, the `out` array will be set to the ufunc result.
    Elsewhere, the `out` array will retain its original value.
    Note that if an uninitialized `out` array is created via the default
    ``out=None``, locations within it where the condition is False will
    remain uninitialized.
**kwargs
    For other keyword-only arguments, see the
    :ref:`ufunc docs <ufuncs.kwargs>`.

Returns
-------
add : ndarray or scalar
    The sum of `x1` and `x2`, element-wise.
    This is a scalar if both `x1` and `x2` are scalars.

Notes
-----
Equivalent to `x1` + `x2` in terms of array broadcasting.

Examples
--------
>>> np.add(1.0, 4.0)
5.0
>>> x1 = np.arange(9.0).reshape((3, 3))
>>> x2 = np.arange(3.0)
>>> np.add(x1, x2)
array([[  0.,   2.,   4.],
       [  3.,   5.,   7.],
       [  6.,   8.,  10.]])
add(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])

Add arguments element-wise.

Parameters
----------
x1, x2 : array_like
    The arrays to be added. If ``x1.shape != x2.shape``, they must be broadcastable to a common shape (which becomes the shape of the output).
out : ndarray, None, or tuple of ndarray and None, optional
    A location into which the result is stored. If provided, it must have
    a shape that the inputs broadcast to. If not provided or None,
    a freshly-allocated array is returned. A tuple (possible only as a
    keyword argument) must have length equal to the number of outputs.
where : array_like, optional
    This condition is broadcast over the input. At locations where the
    condition is True, the `out` array will be set to the ufunc result.
    Elsewhere, the `out` array will retain its original value.
    Note that if an uninitialized `out` array is created via the default
    ``out=None``, locations within it where the condition is False will
    remain uninitialized.
**kwargs
    For other keyword-only arguments, see the
    :ref:`ufunc docs <ufuncs.kwargs>`.

Returns
-------
add : ndarray or scalar
    The sum of `x1` and `x2`, element-wise.
    This is a scalar if both `x1` and `x2` are scalars.

Notes
-----
Equivalent to `x1` + `x2` in terms of array broadcasting.

Examples
--------
>>> np.add(1.0, 4.0)
5.0
>>> x1 = np.arange(9.0).reshape((3, 3))
>>> x2 = np.arange(3.0)
>>> np.add(x1, x2)
array([[  0.,   2.,   4.],
       [  3.,   5.,   7.],
       [  6.,   8.,  10.]])

* Create a null vector of size 10 but the fifth value which is 1 (★☆☆)
#+begin_src python
Z = np.zeros(10)
Z[4] = 1
Z
#+end_src

#+RESULTS[c66782760e6482ddb1336597bf319e72e5bd086c]:
: array([0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])

* Create a vector with values ranging from 10 to 49 (★☆☆)
#+begin_src python
Z = np.arange(10, 50)
Z
#+end_src

#+RESULTS[b16724270addddfd3bce9840486b59a1cbf55b7e]:
: array([10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26,
:        27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
:        44, 45, 46, 47, 48, 49])

* Reverse a vector (first element becomes last) (★☆☆)
#+begin_src python
Z = np.arange(50)
Z[::-1]
#+end_src

#+RESULTS[e30aa7ec7b3d1049c0363b96d7858b2003f37eb3]:
: array([49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33,
:        32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16,
:        15, 14, 13, 12, 11, 10,  9,  8,  7,  6,  5,  4,  3,  2,  1,  0])

* Create a 3x3 matrix with values ranging from 0 to 8 (★☆☆)
#+begin_src python
np.arange(9).reshape(3,3)
#+end_src

#+RESULTS[2698c399225a14b201d3e45944df57587357beb6]:
: array([[0, 1, 2],
:        [3, 4, 5],
:        [6, 7, 8]])

* Find indices of non-zero elements from [1,2,0,0,4,0] (★☆☆)
#+begin_src python
np.nonzero([1,2,0,0,4,0])
#+end_src

#+RESULTS[726d6f96310d9ee97ef85ea1ea1bf6b81caa4141]:
| array | ((0 1 4)) |

* Create a 3x3 identity matrix (★☆☆)
#+begin_src python
  np.eye(3)
#+end_src

#+RESULTS[0f0e5458e3431eb0712b3b41b5b923188062b59d]:
: array([[1., 0., 0.],
:        [0., 1., 0.],
:        [0., 0., 1.]])

* Create a 3x3x3 array with random values (★☆☆)
#+begin_src python
np.random.random([3,3,3])
#+end_src

#+RESULTS[58097c6649e73b33a6315da68e4acd7a3cd03d21]:
#+begin_example
  array([[[0.2038182 , 0.76559121, 0.84355616],
          [0.18709925, 0.1037535 , 0.41538191],
          [0.5369816 , 0.76712142, 0.76192416]],

         [[0.48598776, 0.28700794, 0.62562127],
          [0.00111466, 0.41085195, 0.23934649],
          [0.40297796, 0.34740082, 0.14009223]],

         [[0.51072113, 0.7328188 , 0.87290756],
          [0.26635126, 0.04224107, 0.88484677],
          [0.65397837, 0.02452622, 0.82709475]]])
#+end_example

* Create a 10x10 array with random values and find the minimum and maximum values (★☆☆)
#+begin_src python
Z = np.random.random([10,10])
print("max:%f, min:%f" % (Z.max(), Z.min()))
#+end_src

#+RESULTS[37cc12cb3d924de48872507a0d345b47ae082b59]:
: max:0.990723, min:0.006212

* Create a random vector of size 30 and find the mean value (★☆☆)
#+begin_src python
Z = np.random.random(30)
Z.mean()
#+end_src

#+RESULTS[90f4046c64f38585e1edb205e4a54ca607617a65]:
: 0.5021235755572655

* Create a 2d array with 1 on the border and 0 inside (★☆☆)
#+begin_src python
Z = np.ones([5,5])
Z[1:-1, 1:-1] = 0
Z
#+end_src

#+RESULTS[074a478a60c71341ccc7c5e7d50154489c481892]:
: array([[1., 1., 1., 1., 1.],
:        [1., 0., 0., 0., 1.],
:        [1., 0., 0., 0., 1.],
:        [1., 0., 0., 0., 1.],
:        [1., 1., 1., 1., 1.]])

* How to add a border (filled with 0's) around an existing array? (★☆☆)
#+begin_src python
Z = np.ones([5,5])
Z = np.pad(Z, [0,3])
Z
#+end_src

#+RESULTS[f9aead99499d320b2d9b2778140b6dd6a99dc8dd]:
: array([[1., 1., 1., 1., 1., 0., 0., 0.],
:        [1., 1., 1., 1., 1., 0., 0., 0.],
:        [1., 1., 1., 1., 1., 0., 0., 0.],
:        [1., 1., 1., 1., 1., 0., 0., 0.],
:        [1., 1., 1., 1., 1., 0., 0., 0.],
:        [0., 0., 0., 0., 0., 0., 0., 0.],
:        [0., 0., 0., 0., 0., 0., 0., 0.],
:        [0., 0., 0., 0., 0., 0., 0., 0.]])

#+begin_src python
Z = np.ones([5,5])
Z = np.pad(Z, [1,3])
Z
#+end_src

#+RESULTS[fefc4bab98c1dd8a906568e271ffec0cac48aa6d]:
: array([[0., 0., 0., 0., 0., 0., 0., 0., 0.],
:        [0., 1., 1., 1., 1., 1., 0., 0., 0.],
:        [0., 1., 1., 1., 1., 1., 0., 0., 0.],
:        [0., 1., 1., 1., 1., 1., 0., 0., 0.],
:        [0., 1., 1., 1., 1., 1., 0., 0., 0.],
:        [0., 1., 1., 1., 1., 1., 0., 0., 0.],
:        [0., 0., 0., 0., 0., 0., 0., 0., 0.],
:        [0., 0., 0., 0., 0., 0., 0., 0., 0.],
:        [0., 0., 0., 0., 0., 0., 0., 0., 0.]])

#+begin_src python
Z = np.ones([5,5])
Z = np.pad(Z, pad_width=1)
Z
#+end_src

#+RESULTS[1ad20b0e746467723b6702133fc829ed26910b41]:
: array([[0., 0., 0., 0., 0., 0., 0.],
:        [0., 1., 1., 1., 1., 1., 0.],
:        [0., 1., 1., 1., 1., 1., 0.],
:        [0., 1., 1., 1., 1., 1., 0.],
:        [0., 1., 1., 1., 1., 1., 0.],
:        [0., 1., 1., 1., 1., 1., 0.],
:        [0., 0., 0., 0., 0., 0., 0.]])

* What is the result of the following expression? (★☆☆)
#+begin_src python
print(0 * np.nan)
print(np.nan == np.nan)
print(np.inf > np.nan)
print(np.nan - np.nan)
print(np.nan in set([np.nan]))
print(0.3 == 3 * 0.1)
#+end_src

#+RESULTS[21bdd41808c5424fdeee48df42da665176b5e92a]:
: nan
: False
: False
: nan
: True
: False

* Create a 5x5 matrix with values 1,2,3,4 just below the diagonal (★☆☆)
#+begin_src python
np.diag(1+np.arange(4), k=1)
#+end_src

#+RESULTS[31865de753ec79a14dea4f11d11cab6ff35c21a6]:
: array([[0, 1, 0, 0, 0],
:        [0, 0, 2, 0, 0],
:        [0, 0, 0, 3, 0],
:        [0, 0, 0, 0, 4],
:        [0, 0, 0, 0, 0]])

#+begin_src python
np.diag(1+np.arange(4), k=-1)
#+end_src

#+RESULTS[c8446b378f6a404ef08f55f0ef2746b4605eb625]:
: array([[0, 0, 0, 0, 0],
:        [1, 0, 0, 0, 0],
:        [0, 2, 0, 0, 0],
:        [0, 0, 3, 0, 0],
:        [0, 0, 0, 4, 0]])

* Create a 8x8 matrix and fill it with a checkerboard pattern (★☆☆)
#+begin_src python
Z = np.zeros([8,8])
Z[::2, ::2] = 1
Z[1::2, 1::2] = 1
Z
#+end_src

#+RESULTS[88900e05db31a7b8db76322ade6c8626f6da43fb]:
: array([[1., 0., 1., 0., 1., 0., 1., 0.],
:        [0., 1., 0., 1., 0., 1., 0., 1.],
:        [1., 0., 1., 0., 1., 0., 1., 0.],
:        [0., 1., 0., 1., 0., 1., 0., 1.],
:        [1., 0., 1., 0., 1., 0., 1., 0.],
:        [0., 1., 0., 1., 0., 1., 0., 1.],
:        [1., 0., 1., 0., 1., 0., 1., 0.],
:        [0., 1., 0., 1., 0., 1., 0., 1.]])

* Consider a (6,7,8) shape array, what is the index (x,y,z) of the 100th element?
#+begin_src python
Z = np.random.random([2,3])
print(Z)
print(Z.argmax())
print(np.unravel_index(Z.argmax(), Z.shape))
#+end_src

#+RESULTS[3690479d1f992960e339b2cab850b4a29dcfc32d]:
: [[0.8272187  0.02819211 0.3075672 ]
:  [0.97838275 0.23290755 0.84657024]]
: 3
: (1, 0)

#+begin_src python
print(np.unravel_index(99, [6,7,8]))
#+end_src

#+RESULTS[c3109993e6c100f0c58c69015b94e4caed675128]:
: (1, 5, 3)

* Create a checkerboard 8x8 matrix using the tile function (★☆☆)
#+begin_src python
np.tile(np.array([[0,1], [1,0]]), [4,4])
#+end_src

#+RESULTS[0ce5d61572a68d66ea20e0e95419c6330292bcea]:
: array([[0, 1, 0, 1, 0, 1, 0, 1],
:        [1, 0, 1, 0, 1, 0, 1, 0],
:        [0, 1, 0, 1, 0, 1, 0, 1],
:        [1, 0, 1, 0, 1, 0, 1, 0],
:        [0, 1, 0, 1, 0, 1, 0, 1],
:        [1, 0, 1, 0, 1, 0, 1, 0],
:        [0, 1, 0, 1, 0, 1, 0, 1],
:        [1, 0, 1, 0, 1, 0, 1, 0]])

* Normalize a 5x5 random matrix (★☆☆)
#+begin_src python
Z = np.random.random([5,5])
Z = (Z-Z.mean())/Z.std()
Z
#+end_src

#+RESULTS[3162b55f054c4c53b21e0d88de8e35d2925b11c5]:
: array([[-1.42216779, -0.82322427,  0.71380461, -0.25725093,  0.39727282],
:        [-0.39995888, -1.53574037,  1.59672587,  1.37494787, -0.26295408],
:        [ 1.58107555, -1.27196801,  0.94770613, -0.65513144,  0.29574934],
:        [ 0.60065036, -1.34652242,  0.3533401 ,  0.16422289,  1.41900219],
:        [-1.13060947, -0.82508816, -0.9350356 ,  1.35229804,  0.06885566]])

* Create a custom dtype that describes a color as four unsigned bytes (RGBA) (★☆☆)
#+begin_src python
  color = np.dtype([("r", np.ubyte, 1),
                    ("g", np.ubyte, 1),
                    ("b", np.ubyte, 1),
                    ("a", np.ubyte, 1)])
  color
#+end_src

#+RESULTS[6696b15a37fac92fb02db2f0bb0f12132731e9eb]:
:RESULTS:
: <ipython-input-98-4daa7c2f2b60>:1: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.
:   color = np.dtype([("r", np.ubyte, 1),
: dtype([('r', 'u1'), ('g', 'u1'), ('b', 'u1'), ('a', 'u1')])
:END:

* Multiply a 5x3 matrix by a 3x2 matrix (real matrix product) (★☆☆)
#+begin_src python
  A = np.array([[1, 2, 3],
                [2, 3, 4],
                [3, 4, 5],
                [4, 5, 6],
                [5, 6, 7]])
  B = np.array([[1, 0],
                [1, 0],
                [1, 0]])
  print('A:\n', A)
  print('B:\n', B)
  print('A@B\n', A@B)
#+end_src

#+RESULTS[da398d16f6cb38b162afd0568d99b248ba97d33a]:
#+begin_example
  A:
   [[1 2 3]
   [2 3 4]
   [3 4 5]
   [4 5 6]
   [5 6 7]]
  B:
   [[1 0]
   [1 0]
   [1 0]]
  A@B
   [[ 6  0]
   [ 9  0]
   [12  0]
   [15  0]
   [18  0]]
#+end_example

* Given a 1D array, negate all elements which are between 3 and 8, in place. (★☆☆)
#+begin_src python
Z = np.arange(10) + 1
Z[(3<=Z) & (Z<=8)] *= -1
Z
#+end_src

#+RESULTS[4c8e8a49a001f7a86a3e6a8de2fccc3e6e59b3eb]:
: array([ 1,  2, -3, -4, -5, -6, -7, -8,  9, 10])

* What is the output of the following script? (★☆☆)
#+begin_src python
# Author: Jake VanderPlas

print(sum(range(5),-1))
print(np.sum(range(5),-1))
#+end_src

#+RESULTS[c07a7b04be11212a2a567206701199ba5fb45b5e]:
: 10
: 10

* Consider an integer vector Z, which of these expressions are legal? (★☆☆)
#+begin_src python
Z = np.arange(5) + 1
Z
#+end_src

#+RESULTS[3b7a8872798f571bdfe5b715d54da7ab2d644df0]:
: array([1, 2, 3, 4, 5])

* What are the result of the following expressions?
#+begin_src python
print(np.array(0) / np.array(0))
print(np.array(0) // np.array(0))
print(np.array([np.nan]).astype(int).astype(float))
#+end_src

#+RESULTS[fc77ea5a2d03b9d8c5682fbe2c5fdcb6347dfebe]:
: nan
: 0
: [-9.22337204e+18]
: <ipython-input-118-2a10de0ee61b>:1: RuntimeWarning: invalid value encountered in true_divide
:   print(np.array(0) / np.array(0))
: <ipython-input-118-2a10de0ee61b>:2: RuntimeWarning: divide by zero encountered in floor_divide
:   print(np.array(0) // np.array(0))

- / :: 割り算。(int)/(int)=(float)
- // :: 切り捨て割り算。(int)//(int)=(int)

#+begin_src python
print(12/5)
print(12//5)
#+end_src

#+RESULTS[7fea5c478641049958f7da6e5f3160dc43709d99]:
: 2.4
: 2

* How to round away from zero a float array ? (★☆☆)
#+begin_src python
Z = np.random.uniform(-10, 10, 10)
Z
#+end_src

#+RESULTS[aaf0bc83d3a760f9ddf2f16050cd6adbc98824ed]:
: array([ 9.80307185,  7.98963608, -7.4362234 ,  8.11567025,  7.20620054,
:        -0.25188165,  3.21786565, -0.64835291,  9.11848612, -2.3105525 ])

#+begin_src python
print(np.copysign(np.ceil(np.abs(Z)), Z))

# More readable but less efficient
print(np.where(Z>0, np.ceil(Z), np.floor(Z)))
#+end_src

#+RESULTS[f8c0e318dd27bdf94fdf2f06174fed620cfcd0af]:
: [10.  8. -8.  9.  8. -1.  4. -1. 10. -3.]
: [10.  8. -8.  9.  8. -1.  4. -1. 10. -3.]

* How to find common values between two arrays? (★☆☆)
#+begin_src python
Z1 = np.random.randint(0, 10, 10)
Z2 = np.random.randint(0, 10, 10)
print(Z1)
print(Z2)
print(np.intersect1d(Z1, Z2))
#+end_src

#+RESULTS[66a9b70b73256860e48b88b8b1d06944069503fb]:
: [5 7 8 8 3 5 6 3 5 9]
: [0 7 6 0 8 9 7 9 4 8]
: [6 7 8 9]

* How to ignore all numpy warnings (not recommended)? (★☆☆)
=hint: np.seterr, np.errstate=
#+begin_src python
# Suicide mode on
defaults = np.seterr(all="ignore")
Z = np.ones(1) / 0

# Back to sanity
_ = np.seterr(**defaults)

# Equivalently with a context manager
with np.errstate(all="ignore"):
    np.arange(3) / 0
#+end_src

#+RESULTS[70f3400180561d2ecd718041e51cb379a340a0a7]:

* Is the following expressions true? (★☆☆)
#+begin_src python
np.sqrt(-1) == np.emath.sqrt(-1)
#+end_src

#+RESULTS[33667aac162d9c5774492727b257ed540e4c5879]:
:RESULTS:
: <ipython-input-130-16339fbc685e>:1: RuntimeWarning: invalid value encountered in sqrt
:   np.sqrt(-1) == np.emath.sqrt(-1)
: False
:END:

=np.emath= for imaginary values.
#+begin_src python
print(np.sqrt(-1))
print(np.emath.sqrt(-1))
#+end_src

#+RESULTS[d26c2561cf69dea5e28334f24feeb8efd25ef3b6]:
: nan
: 1j
: <ipython-input-131-54f6324019e1>:1: RuntimeWarning: invalid value encountered in sqrt
:   print(np.sqrt(-1))

* How to get the dates of yesterday, today and tomorrow? (★☆☆)
#+begin_src python
yesterday = np.datetime64('today') - np.timedelta64(1)
today     = np.datetime64('today')
tomorrow  = np.datetime64('today') + np.timedelta64(1)
print(yesterday, today, tomorrow)
#+end_src

#+RESULTS[ca6666a661b7d0059e77d1815363f11636db0076]:
: 2020-07-08 2020-07-09 2020-07-10

* How to get all the dates corresponding to the month of July 2016? (★★☆)
#+begin_src python
Z = np.arange('2016-07', '2016-08', dtype='datetime64[D]')
print(Z)
#+end_src

#+RESULTS[e1fbee91aadd446d1002325beb87f9baa732a19d]:
: ['2016-07-01' '2016-07-02' '2016-07-03' '2016-07-04' '2016-07-05'
:  '2016-07-06' '2016-07-07' '2016-07-08' '2016-07-09' '2016-07-10'
:  '2016-07-11' '2016-07-12' '2016-07-13' '2016-07-14' '2016-07-15'
:  '2016-07-16' '2016-07-17' '2016-07-18' '2016-07-19' '2016-07-20'
:  '2016-07-21' '2016-07-22' '2016-07-23' '2016-07-24' '2016-07-25'
:  '2016-07-26' '2016-07-27' '2016-07-28' '2016-07-29' '2016-07-30'
:  '2016-07-31']

* How to compute ((A+B)*(-A/2)) in place (without copy)? (★★☆)
#+begin_src python
A = np.ones(3)*1
B = np.ones(3)*2
C = np.ones(3)*3
print(np.add(A,B,out=B))
print(np.divide(A,2,out=A))
print(np.negative(A,out=A))
print(np.multiply(A,B,out=A))
#+end_src

#+RESULTS[5b47394486af850b53f33e91b76d26a569fad121]:
: [3. 3. 3.]
: [0.5 0.5 0.5]
: [-0.5 -0.5 -0.5]
: [-1.5 -1.5 -1.5]

* Extract the integer part of a random array of positive numbers using 4 different methods (★★☆)
#+begin_src python
Z = np.random.uniform(0, 10, 10)

print(Z - Z%1)
print(Z // 1)
print(np.floor(Z))
print(Z.astype(int))
print(np.trunc(Z))
#+end_src

#+RESULTS[04ee0f2ce33a7a416ef4dc3ce8140847bd15d268]:
: [0. 0. 9. 2. 5. 3. 6. 5. 9. 3.]
: [0. 0. 9. 2. 5. 3. 6. 5. 9. 3.]
: [0. 0. 9. 2. 5. 3. 6. 5. 9. 3.]
: [0 0 9 2 5 3 6 5 9 3]
: [0. 0. 9. 2. 5. 3. 6. 5. 9. 3.]

* Create a 5x5 matrix with row values ranging from 0 to 4 (★★☆)
#+begin_src python
Z = np.zeros([5,5])
Z += np.arange(5)
Z
#+end_src

#+RESULTS[0b6581ec61d4c28e546bf1191cc6a168ce30d2d5]:
: array([[0., 1., 2., 3., 4.],
:        [0., 1., 2., 3., 4.],
:        [0., 1., 2., 3., 4.],
:        [0., 1., 2., 3., 4.],
:        [0., 1., 2., 3., 4.]])

* Consider a generator function that generates 10 integers and use it to build an array (★☆☆)
#+begin_src python
  def generate():
      for x in range(10):
          yield x

  Z = np.fromiter(generate(), dtype=float, count=-1)
  Z
#+end_src

#+RESULTS[9bd13e841f494deb5628fd0a7438f612774c334b]:
: array([0., 1., 2., 3., 4., 5., 6., 7., 8., 9.])

* Create a vector of size 10 with values ranging from 0 to 1, both excluded (★★☆)
#+begin_src python
A = np.linspace(0, 1, 10)
B = np.linspace(0, 1, 11)[1:]
C = np.linspace(0, 1, 11, endpoint=False)[1:]
print(A)
print(B)
print(C)
#+end_src

#+RESULTS[1722567bf030fa6305b7a79d469723cff1c57d06]:
: [0.         0.11111111 0.22222222 0.33333333 0.44444444 0.55555556
:  0.66666667 0.77777778 0.88888889 1.        ]
: [0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1. ]
: [0.09090909 0.18181818 0.27272727 0.36363636 0.45454545 0.54545455
:  0.63636364 0.72727273 0.81818182 0.90909091]

* Create a random vector of size 10 and sort it (★★☆)
#+begin_src python
Z = np.random.random(10)
print(Z)
Z.sort()
print(Z)
#+end_src

#+RESULTS[9b222671a298365e23941658ec4fb321225372d5]:
: [0.46028527 0.496102   0.77173058 0.88639274 0.9453273  0.75126499
:  0.90458863 0.74095007 0.11570777 0.49666148]
: [0.11570777 0.46028527 0.496102   0.49666148 0.74095007 0.75126499
:  0.77173058 0.88639274 0.90458863 0.9453273 ]

* How to sum a small array faster than np.sum? (★★☆)
#+begin_src python
Z = np.arange(10)
np.add.reduce(Z)
#+end_src

#+RESULTS[87b9dfc44ae15b6bc4f890a4cfba63116f390883]:
: 45

* Consider two random array A and B, check if they are equal (★★☆)
#+begin_src python
A = np.random.randint(0, 2, 5)
B = np.random.randint(0, 2, 5)

# Assuming identical shape of the arrays and a tolerance
# for the comparison of values
print(np.allclose(A, B))

# Checking both the shape and the element values,
# no tolerance (values have to be exactly equal)
print(np.array_equal(A, B))
#+end_src

#+RESULTS[0151d4571cd24d199e6f33f926324854fba7cc24]:
: False
: False

* Make an array immutable (read-only) (★★☆)
#+begin_src python
Z = np.zeros(10)
Z.flags.writeable = False
Z[0] = 1
#+end_src

#+RESULTS[f122be8af30769ccb8e8185bd2370a573b5cc716]:
:RESULTS:
# [goto error]
: 
: ValueErrorTraceback (most recent call last)
: <ipython-input-154-dcc5e7f145b5> in <module>
:       1 Z = np.zeros(10)
:       2 Z.flags.writeable = False
: ----> 3 Z[0] = 1
: 
: ValueError: assignment destination is read-only
:END:

* Consider a random 10x2 matrix representing cartesian coordinates, convert them to polar coordinates (★★☆)
#+begin_src python
Z = np.random.random([10,2])
print(Z)

x, y = Z[:,0], Z[:,1]
print('x\n', x)
print('y\n', y)

r, t = np.sqrt(x**2 + y**2), np.arctan2(x, y)
print('r\n', r)
print('t\n', t)
#+end_src

#+RESULTS[545897411b708cf44bc2b24ce2364089a30eadf1]:
#+begin_example
  [[0.42927363 0.61656355]
   [0.16310979 0.06977663]
   [0.04072631 0.68035605]
   [0.42346495 0.05223073]
   [0.52441624 0.90491108]
   [0.31243754 0.52824723]
   [0.80464203 0.39688198]
   [0.15736347 0.2253771 ]
   [0.13497289 0.5798199 ]
   [0.59562069 0.52948962]]
  x
   [0.42927363 0.16310979 0.04072631 0.42346495 0.52441624 0.31243754
   0.80464203 0.15736347 0.13497289 0.59562069]
  y
   [0.61656355 0.06977663 0.68035605 0.05223073 0.90491108 0.52824723
   0.39688198 0.2253771  0.5798199  0.52948962]
  r
   [0.75128321 0.17740796 0.68157391 0.4266739  1.04588549 0.61372824
   0.89719792 0.27487833 0.59532243 0.79694621]
  t
   [0.60819519 1.16656547 0.05978894 1.44807481 0.52522634 0.53411703
   1.11257098 0.60953234 0.22871106 0.84410803]
#+end_example

* Create random vector of size 10 and replace the maximum value by 0 (★★☆)
#+begin_src python
Z = np.random.random(10)
print(Z)

Z[Z.argmax()] = 0
print(Z)
#+end_src

#+RESULTS[8718b38b1e129a18407f2263b8fc0a4f89f2184b]:
: [0.43820874 0.59396108 0.71702944 0.28853328 0.59883239 0.70352512
:  0.03873704 0.79985651 0.07140784 0.31851477]
: [0.43820874 0.59396108 0.71702944 0.28853328 0.59883239 0.70352512
:  0.03873704 0.         0.07140784 0.31851477]

* Create a structured array with x and y coordinates covering the [0,1]x[0,1] area (★★☆)
#+begin_src python
Z = np.zeros([5,5], [('x', float), ('y', float)])
print(Z)

Z['x'], Z['y'] = np.meshgrid(np.linspace(0, 1, 5), np.linspace(0, 1, 5))
print(Z)
#+end_src

#+RESULTS[d28d99c9b271a3e39c989a3eebde4535d23a2050]:
: [[(0., 0.) (0., 0.) (0., 0.) (0., 0.) (0., 0.)]
:  [(0., 0.) (0., 0.) (0., 0.) (0., 0.) (0., 0.)]
:  [(0., 0.) (0., 0.) (0., 0.) (0., 0.) (0., 0.)]
:  [(0., 0.) (0., 0.) (0., 0.) (0., 0.) (0., 0.)]
:  [(0., 0.) (0., 0.) (0., 0.) (0., 0.) (0., 0.)]]
: [[(0.  , 0.  ) (0.25, 0.  ) (0.5 , 0.  ) (0.75, 0.  ) (1.  , 0.  )]
:  [(0.  , 0.25) (0.25, 0.25) (0.5 , 0.25) (0.75, 0.25) (1.  , 0.25)]
:  [(0.  , 0.5 ) (0.25, 0.5 ) (0.5 , 0.5 ) (0.75, 0.5 ) (1.  , 0.5 )]
:  [(0.  , 0.75) (0.25, 0.75) (0.5 , 0.75) (0.75, 0.75) (1.  , 0.75)]
:  [(0.  , 1.  ) (0.25, 1.  ) (0.5 , 1.  ) (0.75, 1.  ) (1.  , 1.  )]]

* Given two arrays, X and Y, construct the Cauchy matrix C (Cij =1/(xi - yj))
#+begin_src python
X = np.arange(8)
Y = X + 0.5
C = 1 / np.subtract.outer(X, Y)
print(np.linalg.det(C))
#+end_src

#+RESULTS[52b72b1f1d0bd70d910987ed5e45dd896e8cedd4]:
: 3638.163637117973

* Print the minimum and maximum representable value for each numpy scalar type (★★☆)
#+begin_src python
for dtype in [np.int8, np.int32, np.int64]:
   print(np.iinfo(dtype).min)
   print(np.iinfo(dtype).max)

print()
for dtype in [np.float32, np.float64]:
   print(np.finfo(dtype).min)
   print(np.finfo(dtype).max)
   print(np.finfo(dtype).eps)
#+end_src

#+RESULTS[8644ddb086052382d40a80c96993eb979b10310e]:
#+begin_example
  -128
  127
  -2147483648
  2147483647
  -9223372036854775808
  9223372036854775807

  -3.4028235e+38
  3.4028235e+38
  1.1920929e-07
  -1.7976931348623157e+308
  1.7976931348623157e+308
  2.220446049250313e-16
#+end_example

* How to print all the values of an array? (★★☆)
#+begin_src python
np.set_printoptions(threshold=float("inf"))
Z = np.zeros((16,16))
print(Z)

np.set_printoptions(threshold=10)
Z = np.zeros((16,16))
print(Z)
#+end_src

#+RESULTS[b5a31db4b635de501423b76e4e320957043fb4c9]:
#+begin_example
  [[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
  [[0. 0. 0. ... 0. 0. 0.]
   [0. 0. 0. ... 0. 0. 0.]
   [0. 0. 0. ... 0. 0. 0.]
   ...
   [0. 0. 0. ... 0. 0. 0.]
   [0. 0. 0. ... 0. 0. 0.]
   [0. 0. 0. ... 0. 0. 0.]]
#+end_example

* How to find the closest value (to a given scalar) in a vector? (★★☆)
#+begin_src python
Z = np.random.random(10)
print(Z)

a = 0.5
print(Z[np.abs((Z - a)).argmin()])
#+end_src

#+RESULTS[48524e05357c2358fce33aa28de36ab82613c93d]:
: [0.87888814 0.28052461 0.2690133  0.53576054 0.31936786 0.99329133
:  0.3753039  0.57668983 0.15517512 0.00123844]
: 0.5357605405468211

* Create a structured array representing a position (x,y) and a color (r,g,b) (★★☆)
* Consider a random vector with shape (100,2) representing coordinates, find point by point distances (★★☆)
* How to convert a float (32 bits) array into an integer (32 bits) in place?
* How to read the following file? (★★☆)
* What is the equivalent of enumerate for numpy arrays? (★★☆)
* Generate a generic 2D Gaussian-like array (★★☆)
* How to randomly place p elements in a 2D array? (★★☆)
* Subtract the mean of each row of a matrix (★★☆)
* How to sort an array by the nth column? (★★☆)
* How to tell if a given 2D array has null columns? (★★☆)
* Find the nearest value from a given value in an array (★★☆)
* Considering two arrays with shape (1,3) and (3,1), how to compute their sum using an iterator? (★★☆)
* Create an array class that has a name attribute (★★☆)
* Consider a given vector, how to add 1 to each element indexed by a second vector (be careful with repeated indices)? (★★★)
* How to accumulate elements of a vector (X) to an array (F) based on an index list (I)? (★★★)
* Considering a (w,h,3) image of (dtype=ubyte), compute the number of unique colors (★★★)
* Considering a four dimensions array, how to get sum over the last two axis at once? (★★★)
* Considering a one-dimensional vector D, how to compute means of subsets of D using a vector S of same size describing subset indices? (★★★)
* How to get the diagonal of a dot product? (★★★)
* Consider the vector [1, 2, 3, 4, 5], how to build a new vector with 3 consecutive zeros interleaved between each value? (★★★)
* Consider an array of dimension (5,5,3), how to mulitply it by an array with dimensions (5,5)? (★★★)
* How to swap two rows of an array? (★★★)
* Consider a set of 10 triplets describing 10 triangles (with shared vertices), find the set of unique line segments composing all the triangles (★★★)
* Given an array C that is a bincount, how to produce an array A such that np.bincount(A) == C? (★★★)
* How to compute averages using a sliding window over an array? (★★★)
* Consider a one-dimensional array Z, build a two-dimensional array whose first row is (Z[0],Z[1],Z[2]) and each subsequent row is shifted by 1 (last row should be (Z[-3],Z[-2],Z[-1]) (★★★)
* How to negate a boolean, or to change the sign of a float inplace? (★★★)
* Consider 2 sets of points P0,P1 describing lines (2d) and a point p, how to compute distance from p to each line i (P0[i],P1[i])? (★★★)
* Consider 2 sets of points P0,P1 describing lines (2d) and a set of points P, how to compute distance from each point j (P[j]) to each line i (P0[i],P1[i])? (★★★)
* Consider an arbitrary array, write a function that extract a subpart with a fixed shape and centered on a given element (pad with a fill value when necessary) (★★★)
* Consider an array Z = [1,2,3,4,5,6,7,8,9,10,11,12,13,14], how to generate an array R = [[1,2,3,4], [2,3,4,5], [3,4,5,6], ..., [11,12,13,14]]? (★★★)
* Compute a matrix rank (★★★)
* How to find the most frequent value in an array?
* Extract all the contiguous 3x3 blocks from a random 10x10 matrix (★★★)
* Create a 2D array subclass such that Z[i,j] == Z[j,i] (★★★)
* Consider a set of p matrices wich shape (n,n) and a set of p vectors with shape (n,1). How to compute the sum of of the p matrix products at once? (result has shape (n,1)) (★★★)
* Consider a 16x16 array, how to get the block-sum (block size is 4x4)? (★★★)
* How to implement the Game of Life using numpy arrays? (★★★)
* How to get the n largest values of an array (★★★)
* Given an arbitrary number of vectors, build the cartesian product (every combinations of every item) (★★★)
* How to create a record array from a regular array? (★★★)
* Consider a large vector Z, compute Z to the power of 3 using 3 different methods (★★★)
* Consider two arrays A and B of shape (8,3) and (2,2). How to find rows of A that contain elements of each row of B regardless of the order of the elements in B? (★★★)
* Considering a 10x3 matrix, extract rows with unequal values (e.g. [2,2,3]) (★★★)
* Convert a vector of ints into a matrix binary representation (★★★)
* Given a two dimensional array, how to extract unique rows? (★★★)
* Considering 2 vectors A & B, write the einsum equivalent of inner, outer, sum, and mul function (★★★)
* Considering a path described by two vectors (X,Y), how to sample it using equidistant samples (★★★)?
* Given an integer n and a 2D array X, select from X the rows which can be interpreted as draws from a multinomial distribution with n degrees, i.e., the rows which only contain integers and which sum to n. (★★★)
* Compute bootstrapped 95% confidence intervals for the mean of a 1D array X (i.e., resample the elements of an array with replacement N times, compute the mean of each sample, and then compute percentiles over the means). (★★★)
