#+title: Numpy 100
#+author: conao3
#+date: <2020-07-09 Thu>
#+options: ^:{}

* Config                                                           :noexport:
* Import the numpy package under the name np (★☆☆)
#+begin_src python
import numpy as np
#+end_src

#+RESULTS[8e44e35431bcd44d0dfce26623e25e87bb39fb3f]:

* Print the numpy version and the configuration (★☆☆)
#+begin_src python
print("numpy version:", np.__version__)
np.show_config()
#+end_src

#+RESULTS[6031a7a450ff93e625a064cba91c4e1ce958b9da]:
#+begin_example
  numpy version: 1.18.3
  blas_mkl_info:
    NOT AVAILABLE
  blis_info:
    NOT AVAILABLE
  openblas_info:
      libraries = ['openblas', 'openblas']
      library_dirs = ['/usr/local/lib']
      language = c
      define_macros = [('HAVE_CBLAS', None)]
  blas_opt_info:
      libraries = ['openblas', 'openblas']
      library_dirs = ['/usr/local/lib']
      language = c
      define_macros = [('HAVE_CBLAS', None)]
  lapack_mkl_info:
    NOT AVAILABLE
  openblas_lapack_info:
      libraries = ['openblas', 'openblas']
      library_dirs = ['/usr/local/lib']
      language = c
      define_macros = [('HAVE_CBLAS', None)]
  lapack_opt_info:
      libraries = ['openblas', 'openblas']
      library_dirs = ['/usr/local/lib']
      language = c
      define_macros = [('HAVE_CBLAS', None)]
#+end_example

* Create a null vector of size 10 (★☆☆)
#+begin_src python
np.zeros(10)
#+end_src

#+RESULTS[3688ac0c792b10292b2721ad9b91f7d18df739a6]:
: array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])

* How to find the memory size of any array (★☆☆)
#+begin_src python
Z = np.zeros(10)
print("%d bytes" % (Z.size * Z.itemsize))
#+end_src

#+RESULTS[1b2ce5a0f4435e2de388d64ce02a89d2c11c60d0]:
: 80 bytes

* How to get the documentation of the numpy add function from the command line? (★☆☆)
#+begin_src shell :results raw
python -c "import numpy as np; np.info(np.add)"
#+end_src

#+RESULTS:
add(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])

Add arguments element-wise.

Parameters
----------
x1, x2 : array_like
    The arrays to be added. If ``x1.shape != x2.shape``, they must be broadcastable to a common shape (which becomes the shape of the output).
out : ndarray, None, or tuple of ndarray and None, optional
    A location into which the result is stored. If provided, it must have
    a shape that the inputs broadcast to. If not provided or None,
    a freshly-allocated array is returned. A tuple (possible only as a
    keyword argument) must have length equal to the number of outputs.
where : array_like, optional
    This condition is broadcast over the input. At locations where the
    condition is True, the `out` array will be set to the ufunc result.
    Elsewhere, the `out` array will retain its original value.
    Note that if an uninitialized `out` array is created via the default
    ``out=None``, locations within it where the condition is False will
    remain uninitialized.
**kwargs
    For other keyword-only arguments, see the
    :ref:`ufunc docs <ufuncs.kwargs>`.

Returns
-------
add : ndarray or scalar
    The sum of `x1` and `x2`, element-wise.
    This is a scalar if both `x1` and `x2` are scalars.

Notes
-----
Equivalent to `x1` + `x2` in terms of array broadcasting.

Examples
--------
>>> np.add(1.0, 4.0)
5.0
>>> x1 = np.arange(9.0).reshape((3, 3))
>>> x2 = np.arange(3.0)
>>> np.add(x1, x2)
array([[  0.,   2.,   4.],
       [  3.,   5.,   7.],
       [  6.,   8.,  10.]])
add(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])

Add arguments element-wise.

Parameters
----------
x1, x2 : array_like
    The arrays to be added. If ``x1.shape != x2.shape``, they must be broadcastable to a common shape (which becomes the shape of the output).
out : ndarray, None, or tuple of ndarray and None, optional
    A location into which the result is stored. If provided, it must have
    a shape that the inputs broadcast to. If not provided or None,
    a freshly-allocated array is returned. A tuple (possible only as a
    keyword argument) must have length equal to the number of outputs.
where : array_like, optional
    This condition is broadcast over the input. At locations where the
    condition is True, the `out` array will be set to the ufunc result.
    Elsewhere, the `out` array will retain its original value.
    Note that if an uninitialized `out` array is created via the default
    ``out=None``, locations within it where the condition is False will
    remain uninitialized.
**kwargs
    For other keyword-only arguments, see the
    :ref:`ufunc docs <ufuncs.kwargs>`.

Returns
-------
add : ndarray or scalar
    The sum of `x1` and `x2`, element-wise.
    This is a scalar if both `x1` and `x2` are scalars.

Notes
-----
Equivalent to `x1` + `x2` in terms of array broadcasting.

Examples
--------
>>> np.add(1.0, 4.0)
5.0
>>> x1 = np.arange(9.0).reshape((3, 3))
>>> x2 = np.arange(3.0)
>>> np.add(x1, x2)
array([[  0.,   2.,   4.],
       [  3.,   5.,   7.],
       [  6.,   8.,  10.]])

* Create a null vector of size 10 but the fifth value which is 1 (★☆☆)
#+begin_src python
Z = np.zeros(10)
Z[4] = 1
Z
#+end_src

#+RESULTS[c66782760e6482ddb1336597bf319e72e5bd086c]:
: array([0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])

* Create a vector with values ranging from 10 to 49 (★☆☆)
#+begin_src python
Z = np.arange(10, 50)
Z
#+end_src

#+RESULTS[b16724270addddfd3bce9840486b59a1cbf55b7e]:
: array([10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26,
:        27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
:        44, 45, 46, 47, 48, 49])

* Reverse a vector (first element becomes last) (★☆☆)
#+begin_src python
Z = np.arange(50)
Z[::-1]
#+end_src

#+RESULTS[e30aa7ec7b3d1049c0363b96d7858b2003f37eb3]:
: array([49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33,
:        32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16,
:        15, 14, 13, 12, 11, 10,  9,  8,  7,  6,  5,  4,  3,  2,  1,  0])

* Create a 3x3 matrix with values ranging from 0 to 8 (★☆☆)
#+begin_src python
np.arange(9).reshape(3,3)
#+end_src

#+RESULTS[2698c399225a14b201d3e45944df57587357beb6]:
: array([[0, 1, 2],
:        [3, 4, 5],
:        [6, 7, 8]])

* Find indices of non-zero elements from [1,2,0,0,4,0] (★☆☆)
#+begin_src python
np.nonzero([1,2,0,0,4,0])
#+end_src

#+RESULTS[726d6f96310d9ee97ef85ea1ea1bf6b81caa4141]:
| array | ((0 1 4)) |

* Create a 3x3 identity matrix (★☆☆)
#+begin_src python
  np.eye(3)
#+end_src

#+RESULTS[0f0e5458e3431eb0712b3b41b5b923188062b59d]:
: array([[1., 0., 0.],
:        [0., 1., 0.],
:        [0., 0., 1.]])

* Create a 3x3x3 array with random values (★☆☆)
#+begin_src python
np.random.random([3,3,3])
#+end_src

#+RESULTS[58097c6649e73b33a6315da68e4acd7a3cd03d21]:
#+begin_example
  array([[[0.2038182 , 0.76559121, 0.84355616],
          [0.18709925, 0.1037535 , 0.41538191],
          [0.5369816 , 0.76712142, 0.76192416]],

         [[0.48598776, 0.28700794, 0.62562127],
          [0.00111466, 0.41085195, 0.23934649],
          [0.40297796, 0.34740082, 0.14009223]],

         [[0.51072113, 0.7328188 , 0.87290756],
          [0.26635126, 0.04224107, 0.88484677],
          [0.65397837, 0.02452622, 0.82709475]]])
#+end_example

* Create a 10x10 array with random values and find the minimum and maximum values (★☆☆)
#+begin_src python
Z = np.random.random([10,10])
print("max:%f, min:%f" % (Z.max(), Z.min()))
#+end_src

#+RESULTS[37cc12cb3d924de48872507a0d345b47ae082b59]:
: max:0.990723, min:0.006212

* Create a random vector of size 30 and find the mean value (★☆☆)
#+begin_src python
Z = np.random.random(30)
Z.mean()
#+end_src

#+RESULTS[90f4046c64f38585e1edb205e4a54ca607617a65]:
: 0.5021235755572655

* Create a 2d array with 1 on the border and 0 inside (★☆☆)
#+begin_src python
Z = np.ones([5,5])
Z[1:-1, 1:-1] = 0
Z
#+end_src

#+RESULTS[074a478a60c71341ccc7c5e7d50154489c481892]:
: array([[1., 1., 1., 1., 1.],
:        [1., 0., 0., 0., 1.],
:        [1., 0., 0., 0., 1.],
:        [1., 0., 0., 0., 1.],
:        [1., 1., 1., 1., 1.]])

* How to add a border (filled with 0's) around an existing array? (★☆☆)
#+begin_src python
Z = np.ones([5,5])
Z = np.pad(Z, [0,3])
Z
#+end_src

#+RESULTS[f9aead99499d320b2d9b2778140b6dd6a99dc8dd]:
: array([[1., 1., 1., 1., 1., 0., 0., 0.],
:        [1., 1., 1., 1., 1., 0., 0., 0.],
:        [1., 1., 1., 1., 1., 0., 0., 0.],
:        [1., 1., 1., 1., 1., 0., 0., 0.],
:        [1., 1., 1., 1., 1., 0., 0., 0.],
:        [0., 0., 0., 0., 0., 0., 0., 0.],
:        [0., 0., 0., 0., 0., 0., 0., 0.],
:        [0., 0., 0., 0., 0., 0., 0., 0.]])

#+begin_src python
Z = np.ones([5,5])
Z = np.pad(Z, [1,3])
Z
#+end_src

#+RESULTS[fefc4bab98c1dd8a906568e271ffec0cac48aa6d]:
: array([[0., 0., 0., 0., 0., 0., 0., 0., 0.],
:        [0., 1., 1., 1., 1., 1., 0., 0., 0.],
:        [0., 1., 1., 1., 1., 1., 0., 0., 0.],
:        [0., 1., 1., 1., 1., 1., 0., 0., 0.],
:        [0., 1., 1., 1., 1., 1., 0., 0., 0.],
:        [0., 1., 1., 1., 1., 1., 0., 0., 0.],
:        [0., 0., 0., 0., 0., 0., 0., 0., 0.],
:        [0., 0., 0., 0., 0., 0., 0., 0., 0.],
:        [0., 0., 0., 0., 0., 0., 0., 0., 0.]])

#+begin_src python
Z = np.ones([5,5])
Z = np.pad(Z, pad_width=1)
Z
#+end_src

#+RESULTS[1ad20b0e746467723b6702133fc829ed26910b41]:
: array([[0., 0., 0., 0., 0., 0., 0.],
:        [0., 1., 1., 1., 1., 1., 0.],
:        [0., 1., 1., 1., 1., 1., 0.],
:        [0., 1., 1., 1., 1., 1., 0.],
:        [0., 1., 1., 1., 1., 1., 0.],
:        [0., 1., 1., 1., 1., 1., 0.],
:        [0., 0., 0., 0., 0., 0., 0.]])

* What is the result of the following expression? (★☆☆)
#+begin_src python
print(0 * np.nan)
print(np.nan == np.nan)
print(np.inf > np.nan)
print(np.nan - np.nan)
print(np.nan in set([np.nan]))
print(0.3 == 3 * 0.1)
#+end_src

#+RESULTS[21bdd41808c5424fdeee48df42da665176b5e92a]:
: nan
: False
: False
: nan
: True
: False

* Create a 5x5 matrix with values 1,2,3,4 just below the diagonal (★☆☆)
#+begin_src python
np.diag(1+np.arange(4), k=1)
#+end_src

#+RESULTS[31865de753ec79a14dea4f11d11cab6ff35c21a6]:
: array([[0, 1, 0, 0, 0],
:        [0, 0, 2, 0, 0],
:        [0, 0, 0, 3, 0],
:        [0, 0, 0, 0, 4],
:        [0, 0, 0, 0, 0]])

#+begin_src python
np.diag(1+np.arange(4), k=-1)
#+end_src

#+RESULTS[c8446b378f6a404ef08f55f0ef2746b4605eb625]:
: array([[0, 0, 0, 0, 0],
:        [1, 0, 0, 0, 0],
:        [0, 2, 0, 0, 0],
:        [0, 0, 3, 0, 0],
:        [0, 0, 0, 4, 0]])

* Create a 8x8 matrix and fill it with a checkerboard pattern (★☆☆)
#+begin_src python
Z = np.zeros([8,8])
Z[::2, ::2] = 1
Z[1::2, 1::2] = 1
Z
#+end_src

#+RESULTS[88900e05db31a7b8db76322ade6c8626f6da43fb]:
: array([[1., 0., 1., 0., 1., 0., 1., 0.],
:        [0., 1., 0., 1., 0., 1., 0., 1.],
:        [1., 0., 1., 0., 1., 0., 1., 0.],
:        [0., 1., 0., 1., 0., 1., 0., 1.],
:        [1., 0., 1., 0., 1., 0., 1., 0.],
:        [0., 1., 0., 1., 0., 1., 0., 1.],
:        [1., 0., 1., 0., 1., 0., 1., 0.],
:        [0., 1., 0., 1., 0., 1., 0., 1.]])

* Consider a (6,7,8) shape array, what is the index (x,y,z) of the 100th element?
#+begin_src python
Z = np.random.random([2,3])
print(Z)
print(Z.argmax())
print(np.unravel_index(Z.argmax(), Z.shape))
#+end_src

#+RESULTS[3690479d1f992960e339b2cab850b4a29dcfc32d]:
: [[0.8272187  0.02819211 0.3075672 ]
:  [0.97838275 0.23290755 0.84657024]]
: 3
: (1, 0)

#+begin_src python
print(np.unravel_index(99, [6,7,8]))
#+end_src

#+RESULTS[c3109993e6c100f0c58c69015b94e4caed675128]:
: (1, 5, 3)

* Create a checkerboard 8x8 matrix using the tile function (★☆☆)
* Normalize a 5x5 random matrix (★☆☆)
* Create a custom dtype that describes a color as four unsigned bytes (RGBA) (★☆☆)
* Multiply a 5x3 matrix by a 3x2 matrix (real matrix product) (★☆☆)
* Given a 1D array, negate all elements which are between 3 and 8, in place. (★☆☆)
* What is the output of the following script? (★☆☆)
* Consider an integer vector Z, which of these expressions are legal? (★☆☆)
* What are the result of the following expressions?
* How to round away from zero a float array ? (★☆☆)
* How to find common values between two arrays? (★☆☆)
* How to ignore all numpy warnings (not recommended)? (★☆☆)
* Is the following expressions true? (★☆☆)
* How to get the dates of yesterday, today and tomorrow? (★☆☆)
* How to get all the dates corresponding to the month of July 2016? (★★☆)
* How to compute ((A+B)*(-A/2)) in place (without copy)? (★★☆)
* Extract the integer part of a random array of positive numbers using 4 different methods (★★☆)
* Create a 5x5 matrix with row values ranging from 0 to 4 (★★☆)
* Consider a generator function that generates 10 integers and use it to build an array (★☆☆)
* Create a vector of size 10 with values ranging from 0 to 1, both excluded (★★☆)
* Create a random vector of size 10 and sort it (★★☆)
* How to sum a small array faster than np.sum? (★★☆)
* Consider two random array A and B, check if they are equal (★★☆)
* Make an array immutable (read-only) (★★☆)
* Consider a random 10x2 matrix representing cartesian coordinates, convert them to polar coordinates (★★☆)
* Create random vector of size 10 and replace the maximum value by 0 (★★☆)
* Create a structured array with x and y coordinates covering the [0,1]x[0,1] area (★★☆)
* Given two arrays, X and Y, construct the Cauchy matrix C (Cij =1/(xi - yj))
* Print the minimum and maximum representable value for each numpy scalar type (★★☆)
* How to print all the values of an array? (★★☆)
* How to find the closest value (to a given scalar) in a vector? (★★☆)
* Create a structured array representing a position (x,y) and a color (r,g,b) (★★☆)
* Consider a random vector with shape (100,2) representing coordinates, find point by point distances (★★☆)
* How to convert a float (32 bits) array into an integer (32 bits) in place?
* How to read the following file? (★★☆)
* What is the equivalent of enumerate for numpy arrays? (★★☆)
* Generate a generic 2D Gaussian-like array (★★☆)
* How to randomly place p elements in a 2D array? (★★☆)
* Subtract the mean of each row of a matrix (★★☆)
* How to sort an array by the nth column? (★★☆)
* How to tell if a given 2D array has null columns? (★★☆)
* Find the nearest value from a given value in an array (★★☆)
* Considering two arrays with shape (1,3) and (3,1), how to compute their sum using an iterator? (★★☆)
* Create an array class that has a name attribute (★★☆)
* Consider a given vector, how to add 1 to each element indexed by a second vector (be careful with repeated indices)? (★★★)
* How to accumulate elements of a vector (X) to an array (F) based on an index list (I)? (★★★)
* Considering a (w,h,3) image of (dtype=ubyte), compute the number of unique colors (★★★)
* Considering a four dimensions array, how to get sum over the last two axis at once? (★★★)
* Considering a one-dimensional vector D, how to compute means of subsets of D using a vector S of same size describing subset indices? (★★★)
* How to get the diagonal of a dot product? (★★★)
* Consider the vector [1, 2, 3, 4, 5], how to build a new vector with 3 consecutive zeros interleaved between each value? (★★★)
* Consider an array of dimension (5,5,3), how to mulitply it by an array with dimensions (5,5)? (★★★)
* How to swap two rows of an array? (★★★)
* Consider a set of 10 triplets describing 10 triangles (with shared vertices), find the set of unique line segments composing all the triangles (★★★)
* Given an array C that is a bincount, how to produce an array A such that np.bincount(A) == C? (★★★)
* How to compute averages using a sliding window over an array? (★★★)
* Consider a one-dimensional array Z, build a two-dimensional array whose first row is (Z[0],Z[1],Z[2]) and each subsequent row is shifted by 1 (last row should be (Z[-3],Z[-2],Z[-1]) (★★★)
* How to negate a boolean, or to change the sign of a float inplace? (★★★)
* Consider 2 sets of points P0,P1 describing lines (2d) and a point p, how to compute distance from p to each line i (P0[i],P1[i])? (★★★)
* Consider 2 sets of points P0,P1 describing lines (2d) and a set of points P, how to compute distance from each point j (P[j]) to each line i (P0[i],P1[i])? (★★★)
* Consider an arbitrary array, write a function that extract a subpart with a fixed shape and centered on a given element (pad with a fill value when necessary) (★★★)
* Consider an array Z = [1,2,3,4,5,6,7,8,9,10,11,12,13,14], how to generate an array R = [[1,2,3,4], [2,3,4,5], [3,4,5,6], ..., [11,12,13,14]]? (★★★)
* Compute a matrix rank (★★★)
* How to find the most frequent value in an array?
* Extract all the contiguous 3x3 blocks from a random 10x10 matrix (★★★)
* Create a 2D array subclass such that Z[i,j] == Z[j,i] (★★★)
* Consider a set of p matrices wich shape (n,n) and a set of p vectors with shape (n,1). How to compute the sum of of the p matrix products at once? (result has shape (n,1)) (★★★)
* Consider a 16x16 array, how to get the block-sum (block size is 4x4)? (★★★)
* How to implement the Game of Life using numpy arrays? (★★★)
* How to get the n largest values of an array (★★★)
* Given an arbitrary number of vectors, build the cartesian product (every combinations of every item) (★★★)
* How to create a record array from a regular array? (★★★)
* Consider a large vector Z, compute Z to the power of 3 using 3 different methods (★★★)
* Consider two arrays A and B of shape (8,3) and (2,2). How to find rows of A that contain elements of each row of B regardless of the order of the elements in B? (★★★)
* Considering a 10x3 matrix, extract rows with unequal values (e.g. [2,2,3]) (★★★)
* Convert a vector of ints into a matrix binary representation (★★★)
* Given a two dimensional array, how to extract unique rows? (★★★)
* Considering 2 vectors A & B, write the einsum equivalent of inner, outer, sum, and mul function (★★★)
* Considering a path described by two vectors (X,Y), how to sample it using equidistant samples (★★★)?
* Given an integer n and a 2D array X, select from X the rows which can be interpreted as draws from a multinomial distribution with n degrees, i.e., the rows which only contain integers and which sum to n. (★★★)
* Compute bootstrapped 95% confidence intervals for the mean of a 1D array X (i.e., resample the elements of an array with replacement N times, compute the mean of each sample, and then compute percentiles over the means). (★★★)
